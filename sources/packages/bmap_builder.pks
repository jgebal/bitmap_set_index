ALTER SESSION SET PLSQL_WARNINGS = 'ENABLE:ALL';

ALTER SESSION SET PLSQL_CODE_TYPE = NATIVE;
/
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 3;
/

CREATE OR REPLACE PACKAGE bmap_builder AS

  --segment parameters
  C_ELEMENT_CAPACITY CONSTANT BINARY_INTEGER := 30;
  C_SEGMENT_HEIGHT   CONSTANT BINARY_INTEGER := 3;
  C_SEGMENT_CAPACITY CONSTANT BINARY_INTEGER := POWER( C_ELEMENT_CAPACITY, C_SEGMENT_HEIGHT );

--bitmap parameters
  C_BITMAP_HEIGHT    CONSTANT BINARY_INTEGER := 3;
  C_MAX_BITMAP_SIZE  CONSTANT INTEGER        := POWER(C_SEGMENT_CAPACITY, C_BITMAP_HEIGHT );

  TYPE PLS_INT_LIST    IS TABLE OF PLS_INTEGER;
  TYPE BMAP_SEGMENT_LEVEL  IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
  TYPE BMAP_SEGMENT IS TABLE OF BMAP_SEGMENT_LEVEL INDEX BY PLS_INTEGER;

  CURSOR BIT_LIST_C IS (SELECT CAST(NULL AS INTEGER) bit_no FROM dual);
  TYPE BIT_LIST_REF_C IS REF CURSOR RETURN BIT_LIST_C%ROWTYPE;

  FUNCTION build_bitmap(
    pc_bit_list_crsr BIT_LIST_REF_C
  ) RETURN STOR_BMAP_SEGMENT PIPELINED;

  FUNCTION encode_bmap_segment(
    pt_bit_numbers_list INT_LIST
  ) RETURN BMAP_SEGMENT;

  FUNCTION decode_bmap_segment(
    pt_bitmap_tree BMAP_SEGMENT
  ) RETURN INT_LIST;

  FUNCTION segment_bit_and(
    pt_bmap_left  IN BMAP_SEGMENT,
    pt_bmap_right IN BMAP_SEGMENT
  ) RETURN BMAP_SEGMENT;

  FUNCTION segment_bit_or(
    pt_bmap_left  IN BMAP_SEGMENT,
    pt_bmap_right IN BMAP_SEGMENT
  ) RETURN BMAP_SEGMENT;

  FUNCTION segment_bit_minus(
    pt_bmap_left  IN BMAP_SEGMENT,
    pt_bmap_right IN BMAP_SEGMENT
  ) RETURN BMAP_SEGMENT;

  PROCEDURE set_bits_in_bmap_segment(
    pt_bit_numbers_list INT_LIST,
    pt_bit_map_tree   IN OUT NOCOPY BMAP_SEGMENT
  );

  FUNCTION convert_for_storage(
    pt_bitmap_list BMAP_SEGMENT
  ) RETURN STOR_BMAP_SEGMENT;

  FUNCTION convert_for_processing(
    pt_bitmap_list STOR_BMAP_SEGMENT
  ) RETURN BMAP_SEGMENT;

END bmap_builder;
/

SHOW ERRORS
/
